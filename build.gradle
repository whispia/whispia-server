buildscript {
    ext {
        kotlinVersion = '1.9.25'
        springBootVersion = '3.5.4'
        depsManagement = '1.1.7'
        sonarqubeVersion = '6.0.1.5171'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${depsManagement}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}")
    }
}

// 루트 프로젝트에만 SonarQube 플러그인 적용
apply plugin: 'org.sonarqube'

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group = 'com.whispia'
    version = '0.0.1-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    repositories {
        mavenCentral()
    }

    kotlin {
        compilerOptions {
            freeCompilerArgs.addAll '-Xjsr305=strict'
        }
    }

    jacoco {
        toolVersion = "0.8.12"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
        finalizedBy jacocoTestCoverageVerification
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

// SonarQube 멀티모듈 설정
sonar {
    properties {
        property "sonar.projectKey", "whispia-server"
        property "sonar.projectName", "Whispia Server"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.sourceEncoding", "UTF-8"

        // 루트 프로젝트에서만 스캔하도록 설정
        property "sonar.modules", subprojects.collect { it.name }.join(',')

        // 각 모듈별 설정
        subprojects.each { project ->
            property "sonar.${project.name}.projectBaseDir", project.projectDir
            property "sonar.${project.name}.sources", "src/main/kotlin"
            property "sonar.${project.name}.tests", "src/test/kotlin"
            property "sonar.${project.name}.java.binaries", "build/classes"
            property "sonar.${project.name}.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        }

        // 전역 제외 패턴
        property "sonar.exclusions", "**/build/**,**/out/**"
        property "sonar.test.exclusions", "**/build/**,**/out/**"
    }
}

project(':whispia-api') {
    dependencies {
        implementation project(':whispia-common')
        testImplementation(testFixtures(project(":whispia-common")))
    }
}